name: CI devops 2025
on:
  #to begin you want to launch this job in main and develop
  push:
    branches: [main]
  pull_request:

jobs:
  # test-backend: 
  #   runs-on: ubuntu-24.04
  #   steps:
  #    #checkout your github code using actions/checkout@v4
  #     - uses: actions/checkout@v4

  #    #do the same with another action (actions/setup-java@v4) that enable to setup jdk 21
  #     - name: Set up JDK 21
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'temurin'
  #         java-version: '21'

  #    #finally build your app with the latest command
  #     - name: Build and test with Maven
  #       working-directory: TP1/BackendAPI/notsosimpleapi/
  #       run: mvn clean verify --file pom.xml

  #     - name: Verify with Sonar
  #       working-directory: TP1/BackendAPI/notsosimpleapi/
  #       run: mvn -B verify sonar:sonar -Dsonar.projectKey=${{secrets.SONAR_PROJECTKEY}} -Dsonar.organization=${{vars.SONAR_ORGANIZATION}} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}  --file pom.xml

  # # define job to build and publish docker image
  # build-and-push-docker-image:
  #   runs-on: ubuntu-24.04
  #   # run only when code is compiling and tests are passing
  #   needs: test-backend

  #   # steps to perform in job
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Login to DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ vars.DOCKER_USERNAME }} --password-stdin

  #     - name: Build image and push backend
  #       uses: docker/build-push-action@v6
  #       with:
  #         # relative path to the place where source code with Dockerfile is located
  #         context: TP1/BackendAPI/notsosimpleapi/
  #         options: "--env-file ../../.env"
  #         # Note: tags has to be all lower-case
  #         tags:  ${{vars.DOCKER_USERNAME}}/tp-devops-simple-api:latest
  #         # build on feature branches, push only on main branch
  #         push: ${{ github.ref == 'refs/heads/main' }}


  #     - name: Build image and push database
  #       uses: docker/build-push-action@v6
  #       with:
  #         # relative path to the place where source code with Dockerfile is located
  #         context: TP1/Postgres/
  #         # Note: tags has to be all lower-case
  #         tags:  ${{vars.DOCKER_USERNAME}}/tp-devops-database:latest
  #         # DO the same for database
  #             # build on feature branches, push only on main branch
  #         push: ${{ github.ref == 'refs/heads/main' }}


  #     - name: Build image and push httpd
  #       uses: docker/build-push-action@v6
  #       with:
  #         # relative path to the place where source code with Dockerfile is located
  #         context: TP1/HTTPServer/
  #         # Note: tags has to be all lower-case
  #         tags:  ${{vars.DOCKER_USERNAME}}/tp-devops-httpd:latest
  #             # build on feature branches, push only on main branch
  #         push: ${{ github.ref == 'refs/heads/main' }}

  push-to-ansible:
    runs-on: ubuntu-24.04
    # needs:
    #   test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: ls

      - name: judge of hell gabriel save me 
        uses: ministryofjustice/ansible-playbook-with-keyvault-action@v1.0
        with:
          keyvault_name: vault.yml
          # keyvault_secret_name_vault_password: 'ansible-vault-password'
          # keyvault_secret_name_ssh_privkey: 'ansible-ssh-privkey'

          # ssh_password_txt_filename: 'ansible_pass'
          # ssh_privkey_filename: 'ansible_key'
          
          ansible_dir: ${{ github.workspace }}/TP3/ansible
          ansible_playbook: playbook.yml
          ansible_inventory: inventories/setup.yml
          ansible_user: 'admin'

    # env:
    #   ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
    # needs:
    #   build-and-push-docker-image
    # steps:
    #   - name: Checkout the repository
    #     uses: actions/checkout@v4

    #   - name: Start ssh-agent and add private key
    #     uses: webfactory/ssh-agent@v0.9.0
    #     with:
    #       ssh-private-key: ${{ secrets.ANSIBLE_SSH_PRIVATE }}

    #   - name: Add host to known_hosts (prefer secret)
    #     run: |
    #       mkdir -p ~/.ssh
    #       chmod 700 ~/.ssh

    #       if [ -n "${{ secrets.SSH_KNOWN_HOSTS }}" ]; then
    #         # Use pre-verified known_hosts content from a secret (recommended)
    #         printf '%s\n' "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
    #       else
    #         # Fallback: discover host keys via ssh-keyscan (you should verify the fingerprint manually)
    #         # Replace with your actual host(s) or a variable containing hosts.
    #         TARGET_HOST="antoine.meunier.takima.cloud"
    #         ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts 2>/dev/null
    #       fi
    #       chmod 644 ~/.ssh/known_hosts

    #   - name: Write .env (from secret) and run playbook
    #     working-directory: TP3/ansible/
    #     shell: bash
    #     env:
    #       DOTENV: ${{ secrets.DOTENV }}
    #       ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
    #     run: |
    #       # create .env in the playbook directory (or temp then move)
    #       ENV_FILE="$(mktemp)"
    #       chmod 600 "$ENV_FILE"
    #       printf '%s\n' "$DOTENV" > "$ENV_FILE"

    #       # Move to repo path if your playbook expects ./ .env
    #       mv "$ENV_FILE" ./.env
    #       chmod 600 ./.env

    #       # ensure secure cleanup on exit (attempt shred, otherwise rm)
    #       trap 'if command -v shred >/dev/null 2>&1; then shred -u -- ./.env 2>/dev/null || rm -f -- ./.env; else rm -f -- ./.env; fi' EXIT

    #       VAULT_FILE=$(mktemp)
    #       chmod 600 "$VAULT_FILE"
    #       printf '%s' "$ANSIBLE_VAULT_PASSWORD" > "$VAULT_FILE"

    #       # ensure temp file is removed on exit (even on failure)
    #       trap 'shred -u "$VAULT_FILE" 2>/dev/null || rm -f "$VAULT_FILE"' EXIT

    #       # run the playbook using the vault password file
    #       ansible-playbook -i inventories/setup.yml playbook.yml --vault-password-file "$VAULT_FILE"

